{
  "name": "netcore-monolith-attachment-ms-jwt-auth",
  "scripts": {
    "all": "npm run init && npm run build && npm run deploy && npm run demo && npm run destroy && npm run clean",
    "build": "npm run build-amis && npm run build-amis-delete && npm run build-auth && npm run build-mono && npm run build-ui",
    "build-amis": "cd src/amis && dotnet publish -c Release -p:PublishSingleFile=true --runtime linux-x64 && cd ../..",
    "build-amis-delete": "cd src/amis-delete-doc && rm -rf dist && mkdir dist && tsc && cp package.json dist/package.json && cp package-lock.json dist/package-lock.json && cd dist && npm install --only=prod && cd ../../..",
    "build-auth": "rm -rf dist/auth && pip3 install -r src/auth/requirements.aws.txt -t dist/auth/python",
    "build-mono": "cd src/mono && dotnet publish -c Release -p:PublishSingleFile=true --runtime linux-x64 && cd ../..",
    "build-ui": "cd src/ui && rm -rf dist && npm run build && cd ../..",
    "clean": "npm run empty-buckets && git clean -xdf",
    "create-bucket": "cd client && python create_bucket.py && cd ..",
    "create-users": "cd client && python create_users.py && cd ..",
    "create-users-aws": "cd client && python create_users.py -aws && cd ..",
    "demo-aws": "npm run demo-aws-auth && npm run demo-aws-mono",
    "demo-aws-auth": "cd client && python3 demo_auth.py -aws & cd ..",
    "demo-aws-mono": "cd client && python3 demo_mono.py -aws & cd ..",
    "demo-local": "npm run demo-local-auth && npm run demo-local-mono",
    "demo-local-auth": "cd client && python3 demo_auth.py & cd ..",
    "demo-local-mono": "cd client && python3 demo_mono.py & cd ..",
    "deploy": "cd cdk && cdk deploy --outputs-file ../client/stack-data.json && cd ..",
    "destroy": "npm run empty-buckets && cd cdk && cdk destroy && cd ..",
    "empty-buckets": "aws s3 rm s3://amis-ui --recursive && aws s3 rm s3://amis-document-data --recursive",
    "init": "npm run init-cdk && npm run init-vue",
    "init-cdk": "cd cdk && npm install && cd ..",
    "init-containers": "npm run init-dynamo && np run init-minio",
    "init-dotnet-aws": "dotnet tool install -g Amazon.Lambda.Tools",
    "init-dynamo": "docker run -p 8001:8000 -d --name dynamo-amismonojwt amazon/dynamodb-local && docker ps",
    "init-minio": "docker run -p 8002:9000 -d --name minio-amismonojwt -e \"MINIO_ROOT_USER=admin\" -e \"MINIO_ROOT_PASSWORD=password\" minio/minio:edge server /data",
    "init-vue": "npm i -g @vue/cli && cd src/ui && npm install && cd ../..",
    "select-auth": "cd cdk && python3 prepare.py && cd ..",
    "select-api-auth": "cd cdk && python3 prepare.py -amisauth api -domain n && cd ..",
    "select-api-auth2": "cd cdk && yes api | python3 prepare.py -domain n && cd ..",
    "select-api-auth3": "cd cdk && echo \"api\nn\" | python3 prepare.py && cd ..",
    "start-amis": "cd src/amis && dotnet watch run",
    "start-auth": "cd src/auth; uvicorn api:app --reload --port 6108",
    "start-containers": "npm run start-minio && npm run start-dynamo",
    "start-dynamo": "docker restart dynamo-amismonojwt && docker ps && npm run create-users",
    "start-minio": "docker restart minio-amismonojwt && docker ps && npm run create-bucket",
    "start-mono": "cd src/mono && dotnet watch run",
    "start-ui": "cd src/ui && npm run serve",
    "stop-containers": "npm run stop-dynamo && npm run stop-minio",
    "stop-dynamo": "docker ps && docker stop dynamo-amismonojwt && docker ps",
    "stop-minio": "docker ps && docker stop minio-amismonojwt && docker ps",
    "update-dotnet-aws": "dotnet tool update -g Amazon.Lambda.Tools"
  }
}
